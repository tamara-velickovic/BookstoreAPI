{
	"info": {
		"_postman_id": "8a47dc27-bd5e-45bf-9e12-3fd3ea524a8e",
		"name": "Bookstore17",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "30284172"
	},
	"item": [
		{
			"name": "Account",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"userID\", pm.response.json().userID);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"TamaraVer5\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}"
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"UserID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Username is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).not.equal(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"algorithm": "HS256",
								"isSecretBase64Encoded": false,
								"payload": "{}",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				},
				{
					"name": "Create token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().token);\r",
									"\r",
									"\r",
									"pm.test(\"Status is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(\"User authorized successfully.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"TamaraVer5\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{accountParam}}/{{tokenParam}}"
					},
					"response": []
				},
				{
					"name": "Check authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"TamaraVer5\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{accountParam}}/{{authParam}}"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "BookStore",
			"item": [
				{
					"name": "Get all books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"ISBN1\", pm.response.json().books[0].isbn);\r",
									"\r",
									"pm.environment.set(\"ISBN2\", pm.response.json().books[1].isbn);\r",
									"\r",
									"pm.environment.set(\"ISBN3\", pm.response.json().books[2].isbn);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{bookstoreParam}}/{{booksParam}}"
					},
					"response": []
				},
				{
					"name": "Get a book",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURI}}/{{bookstoreParam}}/{{bookParam}}/?ISBN={{ISBN1}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"{{bookstoreParam}}",
								"{{bookParam}}",
								""
							],
							"query": [
								{
									"key": "ISBN",
									"value": "{{ISBN1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add book to a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{ISBN1}}\"\r\n    } \r\n\r\n\r\n   \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{bookstoreParam}}/{{booksParam}}"
					},
					"response": []
				},
				{
					"name": "Delete a book  from a user Copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"isbn\": \"{{ISBN1}}\",\r\n  \"userId\": \"{{userID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{bookstoreParam}}/{{bookParam}}"
					},
					"response": []
				},
				{
					"name": "Delete all books from a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/{{bookstoreParam}}/{{booksParam}}/?UserId={{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"{{bookstoreParam}}",
								"{{booksParam}}",
								""
							],
							"query": [
								{
									"key": "UserId",
									"value": "{{userID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a book on user profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"isbn\": \"{{ISBN2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{bookstoreParam}}/{{booksParam}}/{{ISBN1}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Runner 1.0",
			"item": [
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"userID\", pm.response.json().userID);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"TamaraVer17\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}"
					},
					"response": []
				},
				{
					"name": "Create token for a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().token);\r",
									"\r",
									"\r",
									"pm.test(\"Status is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(\"User authorized successfully.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"TamaraVer17\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{accountParam}}/{{tokenParam}}"
					},
					"response": []
				},
				{
					"name": "Get user with no books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"UserID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Username is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Books list is empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				},
				{
					"name": "Add book to a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{ISBN1}}\"\r\n    } \r\n\r\n\r\n   \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{bookstoreParam}}/{{booksParam}}"
					},
					"response": []
				},
				{
					"name": "Get user with a book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"UserID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Username is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Books list has a book\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books).not.to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"algorithm": "HS256",
								"isSecretBase64Encoded": false,
								"payload": "{}",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				},
				{
					"name": "Delete a book  from a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"isbn\": \"{{ISBN1}}\",\r\n  \"userId\": \"{{userID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{bookstoreParam}}/{{bookParam}}"
					},
					"response": []
				},
				{
					"name": "Get user with no books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"UserID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Username is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Books list is empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"algorithm": "HS256",
								"isSecretBase64Encoded": false,
								"payload": "{}",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Runner 2.0",
			"item": [
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"userID\", pm.response.json().userID);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"TamaraVer18\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}"
					},
					"response": []
				},
				{
					"name": "Create token for a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().token);\r",
									"\r",
									"\r",
									"pm.test(\"Status is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(\"User authorized successfully.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"TamaraVer18\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{accountParam}}/{{tokenParam}}"
					},
					"response": []
				},
				{
					"name": "Get  user with no books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"UserID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Username is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Books list is empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				},
				{
					"name": "Add 2 books to a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{ISBN1}}\"\r\n\r\n\r\n    } ,\r\n\r\n     {\r\n      \"isbn\": \"{{ISBN2}}\"\r\n\r\n\r\n    } \r\n\r\n\r\n   \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{bookstoreParam}}/{{booksParam}}"
					},
					"response": []
				},
				{
					"name": "Get user with 2 specific books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"UserID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Username is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Book1 is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.get.books[0].isbn).to.eql(pm.environment.get(\"ISBN1\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Book2 is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.get.books[1].isbn).to.eql(pm.environment.get(\"ISBN2\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"algorithm": "HS256",
								"isSecretBase64Encoded": false,
								"payload": "{}",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				},
				{
					"name": "Delete all books from a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURI}}/{{bookstoreParam}}/{{booksParam}}/?UserId={{userID}}",
							"host": [
								"{{baseURI}}"
							],
							"path": [
								"{{bookstoreParam}}",
								"{{booksParam}}",
								""
							],
							"query": [
								{
									"key": "UserId",
									"value": "{{userID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user with no books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"UserID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Username is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Books list is empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"algorithm": "HS256",
								"isSecretBase64Encoded": false,
								"payload": "{}",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Runner 3.0",
			"item": [
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"userID\", pm.response.json().userID);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"TamaraVer19\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}"
					},
					"response": []
				},
				{
					"name": "Create token for a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().token);\r",
									"\r",
									"\r",
									"pm.test(\"Status is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(\"User authorized successfully.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"TamaraVer19\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{accountParam}}/{{tokenParam}}"
					},
					"response": []
				},
				{
					"name": "Get  user with no books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"UserID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Username is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Books list is empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				},
				{
					"name": "Add book to a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{ISBN1}}\"\r\n    } \r\n\r\n\r\n   \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{bookstoreParam}}/{{booksParam}}"
					},
					"response": []
				},
				{
					"name": "Get user with a book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"UserID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Username is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Books list has a book\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books.length).to.be.equal(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"algorithm": "HS256",
								"isSecretBase64Encoded": false,
								"payload": "{}",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				},
				{
					"name": "Update a book on user profile Copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"isbn\": \"{{ISBN3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURI}}/{{bookstoreParam}}/{{booksParam}}/{{ISBN1}}"
					},
					"response": []
				},
				{
					"name": "Get user with an updated book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"UserID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Username is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Books list has one book\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books.length).to.be.equal(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Book is updated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.books[0].isbn).to.eql(pm.environment.get(\"ISBN3\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"algorithm": "HS256",
								"isSecretBase64Encoded": false,
								"payload": "{}",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{baseURI}}/{{accountParam}}/{{userParam}}/{{userID}}"
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "ISBN",
			"value": "?book=9781449325862"
		}
	]
}